#include <stdio.h>
#include <stdint.h>
#include <sleep.h>
uint32_t *control = (uint32_t *) 0x40000000;
int main() {
  *(control) = 0;
  // STEP 3 - commented variable initializations are to be replaced with a more suitable input data transfer
  // importing adderMode toggle, image, and kernel data
  int adderMode = 1; // 1 to run HW on adder mode, 0 to run HW on max-pooling mode
  int im_h = 28; // image height (vertical pixel length)
  int im_w = 28; // image width (horizontal pixel length)
  int wg_dim = 5; // kernel dimension, make sure this value is positive and less than 8
  int im[im_h * im_w] = {253722624,-85016576,-191905792,-433799168,-111345664,-494387200,-409681920,476102656,-350978048,-115228672,-87867392,-171556864,99205120,531415040,370245632,-489324544,-87523328,218169344,-43040768,-351404032,-470433792,-25280512,480116736,99221504,-456065024,333807616,-45842432,204554240,78692352,420757504,17891328,-131104768,102957056,-460472320,5963776,-370819072,71024640,198492160,22380544,267943936,231145472,410025984,43991040,433635328,-361021440,325107712,-248463360,488194048,471105536,-243761152,303333376,-252395520,-413220864,-193986560,-49971200,-486948864,-336183296,-529022976,168951808,-212533248,-449282048,-416612352,-60391424,144556032,121733120,400211968,142032896,65634304,513081344,-286162944,-269484032,-419577856,-65323008,287801344,-527319040,278626304,-289144832,321290240,-77922304,-205586432,123338752,-507461632,63225856,-19038208,-439287808,-435683328,-59981824,-357613568,471465984,124452864,-5685248,-493076480,323813376,-370556928,157679616,-55541760,-79921152,406257664,401883136,266190848,363954176,-205766656,43679744,35061760,-399622144,-218087424,-255557632,44761088,-404226048,215678976,-475480064,-238010368,-97075200,-294617088,-185761792,-522485760,-95846400,299843584,-140328960,-441630720,-58933248,251183104,-501219328,476610560,255885312,-483409920,-247808000,199884800,280379392,-406667264,216678400,314753024,432586752,-199213056,268288000,-82477056,517095424,-261668864,331710464,-151044096,-486096896,-338395136,19005440,-179519488,-148733952,-389349376,522190848,336281600,64536576,245628928,-180224000,-62980096,-70254592,89194496,216662016,341295104,355270656,272564224,-303759360,-389955584,358072320,141475840,424837120,28721152,427196416,-44269568,81494016,25133056,372424704,-241451008,-29229056,42614784,-226820096,-417824768,-141295616,496582656,264437760,332857344,-207863808,-534069248,-69795840,511492096,-264667136,-469073920,128122880,11141120,314474496,-283492352,-23576576,130088960,298663936,-490569728,61734912,-10256384,277250048,-3850240,-525369344,-83787776,223576064,491765760,536150016,-60489728,-216006656,-129073152,515997696,21938176,-434094080,168755200,-453345280,149716992,303251456,-57360384,299139072,-386596864,-251527168,135069696,478150656,510148608,-136134656,383975424,536035328,249823232,-95830016,23183360,-442810368,-406585344,160841728,448806912,31064064,348061696,-216760320,-511770624,-118308864,-160038912,-63586304,217350144,-295960576,-118259712,-366952448,-292487168,350797824,-62636032,433274880,-66830336,-481132544,524353536,-150716416,-452263936,50528256,51331072,373374976,-415465472,503037952,-259768320,80003072,411598848,-515833856,-257638400,326189056,308723712,205684736,-488996864,140705792,130334720,445431808,-165101568,-375717888,182812672,-33439744,13074432,261505024,-488194048,216236032,394493952,206143488,49364992,-279871488,323731456,243662848,104513536,115146752,-134234112,108920832,144621568,-74055680,473137152,-52838400,-344211456,494059520,87130112,-245923840,-177913856,494764032,-33832960,-145604608,-348094464,261783552,-395984896,-252608512,-173588480,-2818048,-125190144,-85344256,24592384,510787584,362364928,-480968704,141688832,476725248,158810112,-207290368,-36257792,-215728128,-392675328,-430784512,-502956032,75988992,-527007744,-250052608,528007168,176979968,421691392,-295157760,187924480,495665152,-495239168,-171098112,354975744,384106496,149209088,-454377472,-138313728,-70762496,-52772864,-383713280,315965440,353828864,-166330368,176504832,-62046208,-247152640,-265650176,217300992,-405258240,299024384,-243220480,483950592,155336704,-41730048,-368459776,121257984,-161366016,415678464,187662336,-60309504,516063232,-353058816,-29868032,430374912,315703296,-506085376,311951360,-359759872,-107134976,42663936,333709312,-247349248,-345309184,-149766144,184795136,378552320,-248414208,-408879104,-204865536,-23904256,-359284736,318750720,270237696,160399360,-320143360,9207808,355106816,54624256,320749568,-229654528,-98336768,-405422080,80822272,293322752,-288423936,-526254080,176209920,-322486272,82100224,-471121920,19513344,-522600448,-49790976,-293224448,-248512512,-384663552,-410828800,10207232,-60342272,-117047296,-53346304,-532086784,-247136256,-272023552,248758272,-497205248,205127680,-191070208,442499072,-190644224,22085632,-522256384,-441909248,251674624,-20381696,-276201472,220282880,-517193728,13238272,86802432,404324352,471580672,-143327232,-341671936,169279488,-18825216,39059456,-200572928,-507904000,-407257088,-363216896,528367616,98435072,-191856640,-277364736,-249921536,-364396544,236290048,-300548096,23085056,170180608,141164544,392839168,17170432,521781248,-145670144,18120704,-25018368,-341622784,469057536,-6422528,-496926720,-80379904,-38322176,405438464,484261888,454344704,-244662272,127451136,-424198144,264781824,-378503168,261242880,-166559744,-473825280,431636480,356352000,-294436864,-360185856,455065600,508968960,-423919616,15466496,-145719296,-263651328,-519536640,471384064,454623232,-273629184,-214286336,428441600,-83574784,159170560,13549568,250527744,-257130496,416923648,106184704,323043328,-509624320,-45858816,-214925312,-518979584,398147584,-532496384,-224034816,-432111616,-18120704,-40910848,-335347712,-257622016,80904192,-475922432,48545792,-51871744,-273072128,-395739136,-508493824,239353856,-271040512,420052992,159203328,327843840,-172556288,451739648,-486899712,-315736064,441860096,-458194944,-164511744,290357248,269615104,372523008,397721600,472383488,-535871488,521814016,-509837312,153747456,96468992,-93913088,-248332288,19087360,536821760,275283968,-22134784,389758976,228360192,-151830528,19644416,394166272,204668928,-419233792,477413376,-333004800,324567040,-282443776,-413057024,365314048,159760384,-330858496,-56705024,-286392320,-399753216,448167936,161792000,297549824,-386514944,-289357824,-424886272,324616192,-293044224,-5292032,-187973632,475283456,364232704,-163217408,69746688,-533725184,360693760,396607488,-286179328,409944064,125878272,-400883712,142163968,498499584,425574400,-409042944,444252160,245678080,-39337984,-487473152,-144867328,-35094528,-118898688,508674048,-109690880,72892416,-134496256,20348928,-98795520,-87638016,-494616576,-452771840,194969600,423231488,-480559104,-340295680,-148652032,44236800,-100466688,-53428224,-253067264,468123648,278134784,96665600,6701056,-364101632,151814144,109625344,-257376256,492388352,235831296,392282112,504102912,-125026304,119898112,-64847872,-128942080,-491896832,125763584,-355975168,236683264,216629248,264044544,78168064,-175144960,-56524800,-223395840,-449396736,270467072,-439828480,83722240,51789824,-60227584,131481600,-321830912,-532316160,-486342656,-64307200,-101285888,-346292224,515686400,-320274432,-89751552,-197705728,498139136,374865920,-182697984,140492800,194183168,-471072768,-224313344,-19169280,235094016,-342179840,244105216,-306757632,-141869056,367083520,425607168,-400392192,-222101504,288178176,-300957696,-420708352,-145375232,-105725952,-524500992,177455104,-180289536,346259456,443908096,262897664,-100646912,153960448,165642240,29294592,438632448,-260947968,433471488,-292651008,-527220736,-98910208,176406528,-447578112,-142508032,365592576,-294469632,-133857280,243712000,-212172800,505135104,311967744,-533282816,303562752,-403079168,361283584,325451776,354664448,-57753600,-149782528,-470843392,142360576,144457728,-299876352,162414592,14811136,359268352,-373342208,-384335872,267042816,260030464,-22822912,-417644544,-40747008,462848000,401915904,-462077952,-270827520,468123648,59211776,-431964160,-514244608,-296583168,429752320,-391446528,519733248,-41779200,176537600,204881920,-221036544,196182016,-463208448,9469952,-383090688,-419512320,-265617408,-290816000,351551488,-11927552,-111116288,-275382272,396754944,142884864,349208576,42975232,-264192000,483377152,419414016,65634304,-521781248,74448896,-465469440,53297152,-35766272,170754048,283787264,-434716672,82952192,9650176,427278336,68616192,-459702272,305610752,328630272,-398770176,13795328,-366919680,154877952,-61816832,-405127168,-130613248,-333905920,382976000,464158720,-298860544,367067136}; // image array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int wg[wg_dim * wg_dim] = {214499328,236437504,64045056,-283508736,-215089152,480362496,-304807936,105512960,498843648,265322496,-135380992,-486670336,314654720,438239232,92471296,464093184,168116224,-379420672,4521984,476413952,-256294912,-11108352,-97173504,-120930304,-442400768}; // square kernel array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int out_h = im_h - wg_dim + 1;
  int out_w = im_w - wg_dim + 1;
  int out[out_w * out_h]; // output of this (image, kernel) layer will be stored here, format is signed fixed point with radix at 16th (Q15.16)
  // STEP 4
  int jumps = 8 - wg_dim + 1;
  int out_h_rep = out_h % jumps == 0 ? out_h / jumps : 1 + out_h / jumps; // Math.ceil(out_h / jumps)
  int out_w_rep = out_w % jumps == 0 ? out_w / jumps : 1 + out_w / jumps; // Math.ceil(out_w / jumps)
  // STEP 5
  int count = 0;
  for(count = 0; count < 7 * 7; count++) {
    if(count % 7 < wg_dim && count / 7 < wg_dim) {
      *(control + 65 + count) = wg[wg_dim * (count / 7) + count % 7];
    } else {
      *(control + 65 + count) = 0;
    }
  }
  // STEP 6
  int jumpRight = 0;
  int jumpDown = 0;
  int moveRight = 0;
  int moveDown = 0;
  for(jumpDown = 0; jumpDown < out_h_rep; jumpDown++) {
    for(jumpRight = 0; jumpRight < out_w_rep; jumpRight++) {
      for(moveDown = 0; moveDown < 8; moveDown++) {
        for(moveRight = 0; moveRight < 8; moveRight++) {
          if(jumps * jumpRight + moveRight < im_w && jumps * jumpDown + moveDown < im_h) {
            *(control + 1 + 8 * moveDown + moveRight) = im[im_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)];
          } else {
            *(control + 1 + 8 * moveDown + moveRight) = 0;
          }
        }
      }
      if(adderMode = 1) {
        *(control) = 0xffffffff;// turn on all the bits to enable adder mode
      } else {
        *(control) = 0x007fffff; // turn off the first 9 bits to enable max-pooling mode
      }
      usleep(1); // sleep length is mostly determined by HW specifications and performance (added 10% extra time as buffer)
      *(control) = 0;
      for(moveDown = 0; moveDown < jumps; moveDown++) {
        for(moveRight = 0; moveRight < jumps; moveRight++) {
          if(jumps * jumpRight + moveRight < out_w && jumps * jumpDown + moveDown < out_h) {
            out[out_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)] = (int)*(control + 114 + 8 * moveDown + moveRight);
          }
        }
      }
    }
  }
  // STEP 7 - at this point, output of the (image, kernel) layer is in out[]
  printf("result = [\n");
  for(count = 0; count < out_w * out_h; count++) {
    printf("%f,\n", (double) (out[count] / 65536));
  }
  printf("]\n");
}
