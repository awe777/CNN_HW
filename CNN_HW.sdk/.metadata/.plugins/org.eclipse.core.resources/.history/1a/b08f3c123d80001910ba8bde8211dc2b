#include <stdio.h>
#include <stdint.h>
#include <sleep.h>
uint32_t *control = (uint32_t *) 0x40000000;
int main() {
  *(control) = 0;
  // STEP 3 - commented variable initialisations are to be replaced with a more suitable input data transfer
  // importing adderMode toggle, image, and kernel data
  int adderMode = 1; // 1 to run HW on adder mode, 0 to run HW on max-pooling mode
  int im_h = 28; // image height (vertical pixel length)
  int im_w = 28; // image width (horizontal pixel length)
  int wg_dim = 5; // kernel dimension, make sure this value is positive and less than 8
  int im[784] = {426999808,-174145536,144736256,-382976000,268124160,138772480,-327778304,-528793600,-390692864,-311967744,10731520,319520768,202342400,-63930368,-465534976,-439058432,-394018816,-44482560,12730368,-133660672,-333955072,531939328,111067136,-432373760,-287686656,130531328,-266731520,465960960,124321792,-79413248,-529416192,32325632,-504692736,-316506112,-251641856,130056192,-148144128,67944448,-23642112,-253411328,11124736,525828096,-398655488,-435060736,-32391168,-30670848,-184827904,287440896,-450215936,-522108928,-378552320,499777536,122454016,211746816,134856704,-187465728,-2916352,287752192,347078656,187891712,435388416,-14188544,-181665792,-288620544,344981504,157499392,197279744,202211328,-393805824,-431521792,-97337344,-47448064,427360256,-325812224,35618816,371130368,276889600,49217536,478953472,-51085312,484638720,219054080,-447102976,76300288,-72482816,447725568,-192315392,-10354688,379207680,-245465088,511803392,16596992,-427687936,335331328,374669312,363331584,-369311744,143523840,206913536,453951488,-2801664,-30244864,-88195072,-128483328,150077440,-536412160,333578240,316047360,-281509888,-374456320,478167040,-116637696,-119586816,48513024,370425856,518553600,191021056,498139136,-504201216,139165696,512442368,500498432,-66846720,423362560,-98140160,-62324736,341311488,-337461248,99188736,47939584,533135360,-244219904,-246824960,261603328,409108480,332021760,61112320,18513920,-223690752,494108672,-532021248,406798336,370491392,62750720,361168896,481886208,232751104,5029888,473317376,-314081280,230457344,143507456,426229760,353517568,-32096256,-516390912,244678656,476053504,380583936,-71368704,-333217792,6848512,415727616,-210501632,-231374848,451313664,78069760,-516849664,-112132096,511475712,-277168128,418840576,-261210112,232292352,466796544,383434752,-200523776,-84049920,-311377920,-131661824,107577344,76578816,399147008,-346488832,418742272,-401489920,-456572928,521437184,447512576,-424476672,-44417024,-402653184,467779584,14352384,297156608,90079232,36700160,293158912,352960512,104398848,93175808,-69386240,-525123584,-273743872,230178816,-379617280,29065216,485933056,375013376,436797440,88670208,372178944,70500352,355074048,-513835008,-128679936,-407994368,-884736,-140886016,53575680,-236699648,361316352,433405952,147210240,56442880,374571008,463355904,522272768,160940032,-292339712,-135856128,-461717504,-263110656,-126517248,73367552,308543488,-79265792,-303529984,212418560,-482459648,-498417664,40321024,-470597632,97009664,285999104,-378077184,261521408,-638976,-319258624,72728576,-251789312,492896256,-283934720,-474644480,226213888,159137792,361562112,-344064,375390208,-166051840,321683456,379764736,332038144,73662464,-257572864,175980544,405274624,-529514496,529022976,93618176,-201867264,481034240,-391299072,413859840,-311607296,-40255488,99188736,435978240,331038720,-401162240,-411156480,-51773440,279216128,370868224,477708288,-364380160,15892480,-281198592,110772224,-398360576,356827136,-7421952,-327925760,277528576,311525376,445546496,-277889024,381763584,-423575552,174505984,15351808,-129286144,-201097216,-73416704,-503709696,-225984512,-365740032,-145096704,-102203392,-308527104,493912064,513556480,-221249536,-492699648,432881664,-312115200,2899968,-67747840,-54378496,63619072,278151168,493928448,363053056,-59883520,222183424,325173248,63471616,522469376,-92717056,-411484160,-414384128,258506752,355172352,-309608448,23265280,123617280,-110870528,407060480,240615424,443908096,-515358720,378241024,139821056,194887680,-392396800,38731776,-365101056,-285540352,368672768,-252624896,-4636672,233422848,203014144,245334016,-220135424,-43827200,-142295040,-255180800,82051072,531070976,-161857536,-211107840,402849792,507052032,42172416,225755136,5357568,-273924096,-380846080,-66093056,393150464,460914688,-510935040,492781568,139264000,-395100160,9175040,5701632,168378368,147849216,69173248,175947776,-405176320,286867456,416710656,202113024,-115933184,-76398592,158285824,-7323648,-109477888,-41926656,-26853376,456130560,257064960,341229568,454836224,-255885312,9207808,-528564224,44744704,457195520,437485568,503529472,-332496896,26345472,99680256,43335680,-339640320,-285900800,-77135872,113852416,236617728,312803328,-461275136,509755392,-386334720,-506724352,365281280,421756928,230801408,256196608,384811008,255770624,-69402624,-384532480,-386236416,82395136,81575936,-347062272,512163840,209862656,-421445632,92438528,55115776,228245504,-12451840,464207872,380977152,288325632,476889088,-235044864,475856896,-343015424,-414253056,-472203264,310984704,273072128,-323780608,-354189312,376700928,412598272,131170304,73138176,-482246656,-31965184,-151453696,-6012928,103055360,349978624,-321536000,413827072,443809792,-232570880,123961344,-18939904,-441581568,-53739520,425656320,-160104448,110772224,334528512,-532054016,-463044608,-416317440,-106938368,-80330752,-395231232,-241221632,107642880,325713920,534937600,458162176,-343556096,357171200,-61521920,-161103872,-475463680,-223444992,-257720320,-423526400,84312064,51036160,-239796224,34455552,-460439552,498040832,-228966400,-466763776,452198400,410763264,-24887296,-101056512,431112192,-346259456,-163479552,-149291008,-151437312,-262422528,-515751936,-308183040,-104857600,295239680,-351617024,-458932224,297091072,377241600,-182550528,-157286400,-423133184,-16138240,-261439488,307003392,-293945344,-91406336,-501219328,196673536,-252821504,-499482624,334233600,-506920960,419151872,-464273408,460128256,-172032000,528809984,291717120,-118784000,-306462720,330907648,-183681024,-517062656,-114098176,135643136,99680256,-463077376,-364199936,140214272,52019200,155090944,-479920128,393920512,-429998080,54018048,530628608,185384960,523124736,-122814464,14385152,523419648,370999296,-173965312,259325952,206553088,-467550208,457949184,302710784,-417955840,418676736,-259588096,-430342144,419184640,-211124224,-504365056,488243200,-224935936,-218497024,-320471040,-171573248,433078272,439451648,448315392,-201310208,229933056,-508674048,35553280,-407683072,-189956096,-452034560,243679232,457310208,-517619712,-116736000,-387563520,472940544,230047744,195428352,244776960,326631424,-344178688,215793664,47792128,-489259008,-517554176,-154779648,-157138944,-481050624,465420288,-459653120,294830080,-76185600,-230113280,-65208320,-382599168,535183360,230227968,-179159040,468893696,-493617152,-461340672,-393265152,443367424,447135744,-215056384,-214876160,335560704,-59375616,90112000,429228032,67846144,68059136,139919360,348061696,-129466368,-517718016,-414171136,66404352,168345600,371130368,52199424,524517376,25608192,238092288,-483901440,-270254080,126238720,-456867840,-64487424,-88080384,-279871488,-24444928,218005504,-435191808,215646208,-367886336,-512458752,-421888000,145637376,493305856,332791808,-185450496,-444186624,93077504,-49545216,254312448,-117325824,-46432256,-514031616,-44974080,374980608,-21757952,99811328,-35831808,-529940480,157876224,1212416,-261210112,80166912,-75792384,-438370304,-503889920,201080832,162398208,-85114880,-25952256,-506478592,238108672,253214720,11583488,369328128,-339886080,-117014528,481951744,-461504512,177569792,160333824,91930624,-284033024,-101269504,463552512,530251776,497909760,-281329664,-81821696,-142540800,-475283456,-315899904,430833664,-238059520,431505408,285343744,-25067520,47349760,485343232,-31096832,-264060928,138559488,-186777600,262930432,-490651648,-412385280,45744128,-417169408,179765248,24526848,-473595904,-405192704,536297472,166264832,-145031168,350912512,-28131328,104284160,452558848,-190054400,102678528,85704704,535183360,21938176,196231168,271908864,192774144,240517120,80199680,-292487168,444678144,-323092480,-295616512,-415432704,-300236800,-513851392,403865600,486359040,-33423360,427245568,-233209856,365166592,-258342912,488898560,-379879424,54231040,151502848,258179072,-438353920,109805568,-507314176,121225216,-40714240,282181632,335691776,-443170816,-43483136,-417660928,-465321984,-335314944,-485408768,279379968,342949888,-319995904,190873600,28327936,278544384,504414208,178929664}; // image array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int wg[25] = {-246906880,-450183168,-456327168,257654784,-121208832,-429342720,404652032,59015168,-93421568,-279969792,-517718016,-258834432,353239040,-502956032,372113408,487276544,-459964416,259637248,-430784512,-522485760,-270041088,-136822784,-274923520,236158976,-421429248}; // square kernel array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int out_h = im_h - wg_dim + 1;
  int out_w = im_w - wg_dim + 1;
  int out[out_w * out_h]; // output of this (image, kernel) layer will be stored here, format is signed fixed point with radix at 16th (Q15.16)
  // STEP 4
  int jumps = 8 - wg_dim + 1;
  int out_h_rep = out_h % jumps == 0 ? out_h / jumps : 1 + out_h / jumps; // Math.ceil(out_h / jumps)
  int out_w_rep = out_w % jumps == 0 ? out_w / jumps : 1 + out_w / jumps; // Math.ceil(out_w / jumps)
  // STEP 5
  int count = 0;
  for(count = 0; count < 7 * 7; count++) {
    if(count % 7 < wg_dim && count / 7 < wg_dim) {
      *(control + 65 + count) = wg[wg_dim * (count / 7) + count % 7];
    } else {
      *(control + 65 + count) = 0;
    }
  }
  // STEP 6
  int jumpRight = 0;
  int jumpDown = 0;
  int moveRight = 0;
  int moveDown = 0;
  for(jumpDown = 0; jumpDown < out_h_rep; jumpDown++) {
    for(jumpRight = 0; jumpRight < out_w_rep; jumpRight++) {
      for(moveDown = 0; moveDown < 8; moveDown++) {
        for(moveRight = 0; moveRight < 8; moveRight++) {
          if(jumps * jumpRight + moveRight < im_w && jumps * jumpDown + moveDown < im_h) {
            *(control + 1 + 8 * moveDown + moveRight) = im[im_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)];
          } else {
            *(control + 1 + 8 * moveDown + moveRight) = 0;
          }
        }
      }
      if(adderMode = 1) {
        *(control) = 0xffffffff;// turn on all the bits to enable adder mode
      } else {
        *(control) = 0x007fffff; // turn off the first 9 bits to enable max-pooling mode
      }
      usleep(1); // sleep length is mostly determined by HW specifications and performance (added 10% extra time as buffer)
      *(control) = 0;
      for(moveDown = 0; moveDown < jumps; moveDown++) {
        for(moveRight = 0; moveRight < jumps; moveRight++) {
          if(jumps * jumpRight + moveRight < out_w && jumps * jumpDown + moveDown < out_h) {
            out[out_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)] = (int)*(control + 114 + 8 * moveDown + moveRight);
          }
        }
      }
    }
  }
  // STEP 7 - at this point, output of the (image, kernel) layer is in out[]
  printf("result = [\n");
  for(count = 0; count < out_w * out_h; count++) {
    printf("%f,\n", (double) ((int) (out[count])) / 65536);
  }
  printf("]\n");
}
