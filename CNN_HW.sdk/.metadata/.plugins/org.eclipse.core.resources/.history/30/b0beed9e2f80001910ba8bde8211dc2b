#include <stdio.h>
#include <stdint.h>
#include <sleep.h>
uint32_t *control = (uint32_t *) 0x40000000;
int main() {
  *(control) = 0;
  // STEP 3 - commented variable initialisations are to be replaced with a more suitable input data transfer
  // importing adderMode toggle, image, and kernel data
  int adderMode = 1; // 1 to run HW on adder mode, 0 to run HW on max-pooling mode
  int im_h = 28; // image height (vertical pixel length)
  int im_w = 28; // image width (horizontal pixel length)
  int wg_dim = 5; // kernel dimension, make sure this value is positive and less than 8
  int im[784] = {13975552,238993408,236732416,-204865536,148045824,-238698496,329482240,37519360,-60506112,93470720,-264224768,275742720,-394641408,-512327680,-110116864,-281329664,-10141696,365101056,-441024512,119259136,-324616192,-253952000,-189317120,80494592,307544064,372604928,237633536,356958208,-287277056,38682624,480870400,-396492800,232718336,-31834112,507592704,-77135872,-370343936,286982144,170491904,-533839872,281772032,-428244992,-501841920,-92618752,271728640,-424673280,423591936,-42745856,-450265088,-441434112,189038592,-170393600,-266813440,292798464,410271744,23986176,-54132736,345325568,199344128,-463831040,95617024,-31064064,-368590848,-487112704,148684800,-94994432,-140935168,-113770496,-509067264,227295232,-185696256,-120094720,-36913152,-296058880,-267124736,-479428608,158973952,-92782592,-254820352,374571008,-69926912,-536330240,104235008,124846080,48414720,-329564160,-435683328,15040512,288964608,26525696,50462720,96305152,238141440,-198197248,495943680,-387973120,530382848,-433995776,-352419840,238010368,-380747776,-393166848,164069376,-448544768,-45498368,19660800,-75284480,-193429504,-412483584,414220288,-444678144,315834368,-105906176,-431407104,449036288,200179712,-248774656,113000448,49004544,363347968,-294699008,207929344,-503283712,-30801920,-109527040,469794816,-499204096,401735680,422100992,-533889024,71647232,-216383488,271351808,100777984,-282296320,441073664,-162545664,409780224,69337088,-531267584,156778496,-492142592,414105600,-160759808,-342163456,-401489920,-94846976,-230408192,-494239744,-152092672,176914432,327057408,-365953024,-364724224,101974016,-261619712,493453312,197083136,456212480,209911808,284508160,-512065536,389513216,-81494016,231686144,141656064,-161103872,-233537536,530563072,247709696,-149815296,-264601600,418463744,-490782720,233373696,-292782080,-251691008,-123731968,-190136320,79511552,82542592,-219561984,-159989760,483377152,332824576,-303169536,460587008,-306085888,-171540480,349011968,-154664960,-266059776,193576960,230031360,-187219968,203112448,476332032,125714432,238026752,-65060864,-473563136,3981312,-174227456,-308346880,-49905664,205455360,471040000,110690304,274071552,135462912,-299646976,48971776,127401984,257310720,-533708800,-266289152,-108642304,-161349632,-499892224,-356483072,168083456,346603520,-273219584,235995136,511688704,-324812800,-14680064,422297600,75743232,473022464,419201024,-171589632,-466993152,47087616,-112607232,-499384320,181665792,-193167360,-377651200,-460193792,-373030912,-60407808,41140224,522092544,1867776,-243269632,235732992,285917184,-214859776,524435456,-506478592,-31293440,211615744,505659392,362348544,293175296,238125056,-39813120,-110788608,359546880,-339705856,178831360,-323403776,-254279680,64749568,-286212096,-186449920,-386727936,201916416,-364118016,-486014976,-526008320,-152174592,389644288,536068096,227868672,-468664320,-110886912,-204587008,-246611968,-448528384,175079424,287604736,68878336,-403292160,161890304,200245248,98566144,96862208,429490176,381960192,340541440,335904768,-132661248,273219584,-251346944,-159481856,-13254656,-206520320,-304971776,346947584,-149192704,382009344,-390561792,276594688,-124125184,311296,89505792,-269795328,-285065216,281149440,400637952,-536395776,153321472,522338304,-434683904,-166903808,76873728,486719488,-29343744,147357696,139149312,-71172096,-256557056,359563264,-22200320,-372604928,-364462080,488570880,-182730752,254459904,-326090752,-162054144,-155992064,-294699008,529432576,-451018752,-528252928,242368512,-15990784,16285696,-473546752,-138543104,427130880,-330891264,115212288,184827904,275529728,37601280,497270784,-60424192,-410927104,-229834752,-148733952,433963008,-349143040,-79347712,-289374208,361365504,-471547904,469958656,53362688,138297344,-120700928,-483934208,314654720,267550720,369311744,315916288,-88637440,-189890560,-336068608,-516243456,44711936,-286392320,206798848,-446447616,522862592,-187383808,-468123648,56573952,51134464,329859072,253476864,-492191744,-59260928,167837696,157319168,-378650624,-309362688,159137792,-438599680,292913152,-13336576,516653056,136396800,121176064,244039680,-392904704,-406126592,402374656,146292736,305348608,-371671040,-525467648,-243728384,-502726656,446693376,493600768,489799680,187596800,-120455168,-464617472,-280166400,396574720,-482852864,-145539072,497287168,-174718976,198033408,467107840,490225664,300023808,-329449472,-73596928,222396416,145604608,473841664,216924160,173015040,-195002368,237895680,103923712,-488194048,237928448,50184192,-310263808,-174686208,122552320,-378388480,-145981440,147439616,-144572416,250511360,404307968,186597376,-90193920,287293440,502513664,-131825664,-229064704,255983616,324829184,-523255808,371277824,-158597120,-535691264,385974272,-60260352,-532692992,530644992,73187328,47333376,-96485376,-114819072,-57327616,-521338880,495878144,-210681856,-6225920,-27295744,-91930624,486162432,-516685824,-30687232,316293120,96550912,427966464,493240320,-350781440,455901184,-414597120,259244032,-174194688,278708224,-332562432,368607232,299597824,-223641600,242532352,-419856384,-294518784,-157564928,-86409216,-128516096,21020672,378044416,-434192384,86605824,-279461888,330956800,222806016,-519553024,-228327424,385908736,444710912,-453509120,505937920,-532037632,-421969920,528662528,483983360,-63340544,-156631040,465715200,-324993024,-102514688,-376782848,79265792,16384,-333332480,-477790208,-44236800,-262029312,209633280,114999296,-376455168,517521408,393936896,30523392,194887680,193036288,89112576,-500662272,508264448,140607488,-373424128,-408010752,-458244096,394608640,-8339456,-96731136,210206720,481804288,115474432,-71450624,-429506560,279248896,-173080576,536592384,240943104,423477248,136904704,-386826240,-470450176,439287808,-61128704,-126681088,504430592,-401326080,64208896,-426917888,-316391424,-101580800,327680000,-66715648,-393576448,-266092544,-407388160,-5849088,-141213696,357482496,-382828544,-290045952,-281903104,456671232,-208945152,344080384,-196919296,348356608,-148127744,-529776640,-376602624,357040128,76709888,-287064064,482754560,359055360,100810752,188596224,447135744,-146243584,50331648,239812608,-308051968,64716800,123535360,354385920,-377880576,314916864,-470630400,-415170560,-420134912,314720256,176832512,-422182912,-122699776,410501120,-391118848,-225869824,257245184,332218368,196608000,92160000,429473792,335200256,-356368384,-272203776,339722240,74334208,-7290880,114016256,447840256,-496123904,-176291840,-263077888,389939200,-234242048,55345152,-464371712,140754944,117145600,115277824,380715008,-209485824,220004352,120537088,-86818816,341393408,-461307904,-103759872,371261440,162938880,427229184,-167690240,313376768,-73957376,106446848,166920192,78364672,224018432,-28852224,-261701632,-63651840,501465088,408928256,305971200,-311705600,-232161280,184156160,-103677952,-408125440,255885312,-50003968,-510197760,509820928,534691840,-380911616,95600640,396083200,-32653312,337543168,-145735680,-6963200,303808512,281903104,-456441856,-313114624,-352092160,-196558848,10665984,-272236544,-370360320,423231488,-5980160,61898752,15908864,174915584,305233920,-241975296,89047040,-420151296,-32079872,255442944,-389529600,460242944,186286080,369360896,-515473408,234225664,-487440384,-23740416,207650816,184467456,312901632,-234569728,-386383872,184303616,-151945216,79937536,361447424,-385564672,253313024,68927488,32358400,-273022976,-93061120,444874752,-13090816,471236608,37339136,-109281280,-397590528,516800512,207519744,-299368448,302399488,456212480,-215678976,-332201984,506871808,465829888,-425377792,-369475584,342425600,-282394624,-298729472,30146560,-170721280,-86048768,-507953152,-169213952,419053568,-443793408,-193265664,75972608,508248064,-193085440,-308854784,119439360,235192320,-380108800,-161759232,511918080,-153763840,251314176,485916672,-360923136,284590080,10682368,323059712,321388544,259194880,294207488,-61390848,479526912,52707328,-102612992,-496631808,368181248,-157122560,-527302656,-47890432,-251772928,-412205056,-325926912,-451264512,-213549056,-135561216,-159907840,91111424,258916352,381435904,136921088}; // image array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int wg[25] = {-259670016,-130220032,-527007744,171917312,-407470080,-496205824,400916480,211697664,194281472,-281673728,-404570112,391544832,-133627904,396263424,60653568,480329728,221003776,-29884416,25378816,-26017792,67649536,124682240,290947072,507953152,-22822912}; // square kernel array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int out_h = im_h - wg_dim + 1;
  int out_w = im_w - wg_dim + 1;
  int out[out_w * out_h]; // output of this (image, kernel) layer will be stored here, format is signed fixed point with radix at 16th (Q15.16)
  // STEP 4
  int jumps = 8 - wg_dim + 1;
  int out_h_rep = out_h % jumps == 0 ? out_h / jumps : 1 + out_h / jumps; // Math.ceil(out_h / jumps)
  int out_w_rep = out_w % jumps == 0 ? out_w / jumps : 1 + out_w / jumps; // Math.ceil(out_w / jumps)
  // STEP 5
  int count = 0;
  for(count = 0; count < 7 * 7; count++) {
    if(count % 7 < wg_dim && count / 7 < wg_dim) {
      *(control + 65 + count) = wg[wg_dim * (count / 7) + count % 7];
    } else {
      *(control + 65 + count) = 0;
    }
  }
  // STEP 6
  int jumpRight = 0;
  int jumpDown = 0;
  int moveRight = 0;
  int moveDown = 0;
  for(jumpDown = 0; jumpDown < out_h_rep; jumpDown++) {
    for(jumpRight = 0; jumpRight < out_w_rep; jumpRight++) {
      for(moveDown = 0; moveDown < 8; moveDown++) {
        for(moveRight = 0; moveRight < 8; moveRight++) {
          if(jumps * jumpRight + moveRight < im_w && jumps * jumpDown + moveDown < im_h) {
            *(control + 1 + 8 * moveDown + moveRight) = im[im_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)];
          } else {
            *(control + 1 + 8 * moveDown + moveRight) = 0;
          }
        }
      }
      if(adderMode = 1) {
        *(control) = 0xffffffff;// turn on all the bits to enable adder mode
      } else {
        *(control) = 0x007fffff; // turn off the first 9 bits to enable max-pooling mode
      }
      usleep(1); // sleep length is mostly determined by HW specifications and performance (added 10% extra time as buffer)
      *(control) = 0;
      for(moveDown = 0; moveDown < jumps; moveDown++) {
        for(moveRight = 0; moveRight < jumps; moveRight++) {
          if(jumps * jumpRight + moveRight < out_w && jumps * jumpDown + moveDown < out_h) {
            out[out_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)] = (int)*(control + 114 + 8 * moveDown + moveRight);
          }
        }
      }
    }
  }
  // STEP 7 - at this point, output of the (image, kernel) layer is in out[]
  printf("result = [\n");
  for(count = 0; count < out_w * out_h; count++) {
    printf("%f,\n", (double) (out[count] / 65536));
  }
  printf("]\n");
}
