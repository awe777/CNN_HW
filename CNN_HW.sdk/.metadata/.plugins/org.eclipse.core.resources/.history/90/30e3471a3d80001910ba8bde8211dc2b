#include <stdio.h>
#include <stdint.h>
#include <sleep.h>
uint32_t *control = (uint32_t *) 0x40000000;
int main() {
  *(control) = 0;
  // STEP 3 - commented variable initialisations are to be replaced with a more suitable input data transfer
  // importing adderMode toggle, image, and kernel data
  int adderMode = 1; // 1 to run HW on adder mode, 0 to run HW on max-pooling mode
  int im_h = 28; // image height (vertical pixel length)
  int im_w = 28; // image width (horizontal pixel length)
  int wg_dim = 5; // kernel dimension, make sure this value is positive and less than 8
  int im[784] = {-366444544,-187334656,-1884160,-261816320,230424576,280379392,164495360,-203964416,461029376,-250216448,481804288,440680448,480870400,125206528,149913600,-489586688,-250118144,-515391488,158384128,529924096,36667392,-318095360,103677952,-380223488,-191496192,482689024,-147013632,-425181184,-279658496,-15384576,489046016,473350144,187645952,478822400,190611456,-394559488,-245923840,-531496960,318554112,425885696,221872128,-351420416,-495796224,449642496,344653824,-43827200,-413122560,-139264000,73203712,79085568,-138084352,-255197184,-503808000,-414351360,-507707392,-219742208,383746048,-403816448,-47398912,-503529472,-9027584,481050624,248119296,415088640,208125952,-248758272,5586944,-29310976,192577536,-142884864,-468172800,354844672,357400576,16482304,536363008,236470272,-345997312,-466108416,-304529408,2310144,255459328,259784704,-17448960,-362102784,70057984,-130760704,254164992,44875776,426180608,-332693504,-389447680,-157597696,-355041280,390397952,79642624,219742208,-229359616,-142163968,-418316288,509296640,-192151552,88539136,-379437056,25165824,-392871936,-441368576,-277676032,-492470272,-260702208,-466108416,242647040,-369737728,-383565824,-364642304,-497516544,348192768,478871552,377389056,-361496576,-235487232,218005504,50135040,147750912,26886144,-10321920,320569344,530087936,-265469952,417431552,-241270784,475267072,-110657536,529547264,-494387200,-188071936,-165543936,-308609024,153337856,442515456,-377126912,-457932800,185679872,-118996992,-88539136,74792960,1277952,258031616,516276224,-394969088,-450576384,39944192,158777344,-499548160,-32440320,26836992,-500285440,203849728,-154140672,-214614016,210321408,392609792,-103432192,-339132416,513163264,-497172480,411123712,386449408,-442761216,166920192,-163659776,395788288,-422019072,159399936,-265027584,241876992,242188288,-283983872,442417152,268271616,-294043648,-448937984,-433635328,488996864,-55934976,470466560,-431980544,427655168,163004416,35274752,-229654528,457998336,409927680,-351862784,174768128,245022720,494092288,494518272,451100672,-258555904,442597376,-68190208,-353435648,-79642624,-66109440,-63242240,-458407936,-214728704,163741696,73072640,-384368640,-517292032,117145600,370786304,332595200,-6242304,-370442240,494223360,-468074496,-140967936,177848320,-111149056,531152896,-198983680,-252166144,-242974720,-478429184,-221331456,9584640,406241280,473382912,-422068224,-346243072,-510394368,-200458240,95748096,-308117504,-152895488,284262400,95993856,414318592,53411840,159940608,-118423552,-351879168,-40271872,71598080,294174720,-333791232,399032320,-213417984,30900224,9273344,50511872,-351059968,-364281856,415760384,-529661952,-73482240,289685504,188235776,227622912,-418217984,289914880,90423296,464470016,-72204288,20299776,-182124544,458850304,-525910016,295550976,-222068736,-262619136,-223903744,-138903552,110297088,-521322496,-535232512,-131072000,223690752,-339656704,155140096,75857920,149487616,-465567744,495026176,212434944,-145227776,-345407488,-527220736,374980608,-440909824,-142032896,394854400,-528777216,-143589376,-337068032,-256442368,-344719360,127418368,-57917440,-159219712,-351502336,464961536,170999808,-174325760,-385892352,310837248,113147904,381829120,-407437312,135430144,46497792,-262520832,-56950784,-273694720,-210632704,-458096640,-389513216,-222445568,-362020864,310870016,424001536,-147537920,-435666944,-352026624,397344768,121241600,-221921280,316030976,291258368,-510410752,-2408448,-147472384,-146882560,-528171008,230080512,409944064,-500613120,66797568,-481378304,-333283328,17760256,-470532096,214990848,274251776,-281395200,102252544,-282984448,-312393728,389742592,472121344,48365568,296910848,61915136,-468566016,-158007296,346030080,502874112,-332857344,307642368,193429504,389283840,-253968384,-8978432,462487552,-482131968,181108736,129662976,328138752,385581056,317702144,73089024,-283377664,-318717952,147570688,457408512,-130056192,435470336,-150142976,346619904,-6979584,-442040320,-10993664,-206340096,-12451840,-212402176,136380416,269271040,-146112512,-21495808,501383168,73678848,59670528,-99041280,-524042240,-477020160,-417546240,-510164992,170786816,-306970624,-174358528,14811136,-66912256,-123846656,-47939584,83591168,-406519808,-212762624,-528089088,528056320,-79724544,-528924672,211910656,455475200,-458604544,406159360,-144441344,-354877440,-490881024,98844672,-38092800,105070592,409419776,-142114816,401408000,-162250752,-179945472,485507072,-515686400,392069120,-505495552,-445120512,428736512,272121856,-392036352,394461184,483115008,-290144256,34062336,-47054848,-3768320,1998848,279265280,-35143680,-324894720,171196416,26886144,-215171072,-325550080,-51658752,528547840,-244154368,531480576,22544384,341196800,-61587456,-515604480,89112576,-365674496,17399808,-515489792,182697984,-121733120,-136151040,416317440,-249905152,-244154368,221118464,-214990848,48709632,83296256,-201129984,-285671424,-374980608,432029696,-341770240,-418922496,162250752,64798720,263716864,213303296,-112197632,-273973248,100728832,160940032,394723328,331513856,279674880,130088960,-519667712,-333824000,-440385536,134610944,-64094208,523042816,-177389568,-435929088,80822272,-240959488,-124289024,-276267008,45056000,270991360,-260341760,-130580480,-297582592,-353189888,-437862400,150913024,114409472,65404928,420020224,63291392,-410009600,-239403008,-457015296,132546560,7864320,-99680256,-157466624,-452132864,89047040,-72990720,-478920704,-249298944,352649216,-530939904,-2785280,-135364608,266584064,125927424,-60112896,446283776,429277184,-330956800,-211009536,412368896,133300224,-37322752,-335298560,396673024,92356608,414203904,144769024,409600,-265486336,484524032,465584128,502988800,344850432,268320768,-309821440,442908672,-492011520,-445022208,-75530240,154107904,264667136,25231360,-7192576,-354107392,407928832,462913536,535543808,295862272,-150011904,-479805440,-475398144,101187584,-33456128,126074880,265535488,-253329408,173539328,-514965504,410877952,-330924032,-471810048,60456960,222953472,168165376,-163905536,-31768576,-354467840,481689600,149766144,430981120,283590656,-244350976,-98041856,-26558464,172392448,126844928,-100302848,372948992,-140754944,397918208,-162971648,462356480,85573632,-478593024,224215040,401833984,-93110272,260210688,-170639360,174653440,-535789568,26378240,-261619712,-301826048,-125534208,85557248,-22659072,-252100608,-434929664,-432570368,304955392,-135413760,-488292352,-297336832,27967488,42352640,-209256448,299663360,430899200,-379535360,-371572736,346177536,-323420160,504135680,104497152,-331808768,457801728,106577920,416317440,385400832,273809408,-153518080,-122929152,359268352,-70778880,229408768,398508032,-348094464,-400752640,526483456,-519766016,12615680,265682944,518733824,33456128,-211632128,-366166016,-470630400,221020160,482705408,-241401856,-521617408,-301940736,-372670464,510558208,-297631744,-171671552,84033536,-491683840,294256640,155664384,489488384,-271237120,-507150336,451739648,-300761088,96436224,145997824,186368000,-172687360,-5390336,246284288,210616320,510590976,257867776,57262080,405716992,-385794048,53805056,-456933376,-469057536,-173047808,525680640,-98467840,432439296,493813760,360824832,313688064,-4931584,285769728,-55099392,125140992,-487014400,334282752,421183488,-46497792,-403406848,-410402816,-402669568,-359612416,-153878528,-415547392,66650112,173391872,49053696,344473600,180420608,-230211584,93634560,139722752,122617856,9928704,391806976,148504576,-194822144,311328768,41631744,283000832,246415360,-424591360,514392064,-420462592,530776064,-431292416,447381504,489455616,510836736,-93454336,-360349696,311754752,52543488,-419971072,-232669184,-17743872,-401408000,-357482496,-206307328,339050496,-155729920,470630400,-210599936,131137536,-233488384,-70107136,5783552,171393024,102891520,-369115136,4685824,204947456,-478838784,233193472,-293683200,516571136,342228992,155697152,324141056,-495927296,-206340096,-119734272,163430400,138608640,312246272,43319296,-100515840,521732096,-482394112,111771648,-506281984,-232570880,-436322304,-480575488,87162880,67469312,-109395968,436699136}; // image array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int wg[25] = {179306496,-435339264,508116992,26705920,-432947200,148766720,25280512,216907776,26935296,-137068544,122699776,-520110080,-504578048,-192397312,-37945344,-517963776,374243328,-237338624,252968960,375275520,-275349504,-448528384,62799872,-506331136,-346259456}; // square kernel array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int out_h = im_h - wg_dim + 1;
  int out_w = im_w - wg_dim + 1;
  int out[out_w * out_h]; // output of this (image, kernel) layer will be stored here, format is signed fixed point with radix at 16th (Q15.16)
  // STEP 4
  int jumps = 8 - wg_dim + 1;
  int out_h_rep = out_h % jumps == 0 ? out_h / jumps : 1 + out_h / jumps; // Math.ceil(out_h / jumps)
  int out_w_rep = out_w % jumps == 0 ? out_w / jumps : 1 + out_w / jumps; // Math.ceil(out_w / jumps)
  // STEP 5
  int count = 0;
  for(count = 0; count < 7 * 7; count++) {
    if(count % 7 < wg_dim && count / 7 < wg_dim) {
      *(control + 65 + count) = wg[wg_dim * (count / 7) + count % 7];
    } else {
      *(control + 65 + count) = 0;
    }
  }
  // STEP 6
  int jumpRight = 0;
  int jumpDown = 0;
  int moveRight = 0;
  int moveDown = 0;
  for(jumpDown = 0; jumpDown < out_h_rep; jumpDown++) {
    for(jumpRight = 0; jumpRight < out_w_rep; jumpRight++) {
      for(moveDown = 0; moveDown < 8; moveDown++) {
        for(moveRight = 0; moveRight < 8; moveRight++) {
          if(jumps * jumpRight + moveRight < im_w && jumps * jumpDown + moveDown < im_h) {
            *(control + 1 + 8 * moveDown + moveRight) = im[im_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)];
          } else {
            *(control + 1 + 8 * moveDown + moveRight) = 0;
          }
        }
      }
      if(adderMode = 1) {
        *(control) = 0xffffffff;// turn on all the bits to enable adder mode
      } else {
        *(control) = 0x007fffff; // turn off the first 9 bits to enable max-pooling mode
      }
      usleep(1); // sleep length is mostly determined by HW specifications and performance (added 10% extra time as buffer)
      *(control) = 0;
      for(moveDown = 0; moveDown < jumps; moveDown++) {
        for(moveRight = 0; moveRight < jumps; moveRight++) {
          if(jumps * jumpRight + moveRight < out_w && jumps * jumpDown + moveDown < out_h) {
            out[out_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)] = (int)*(control + 114 + 8 * moveDown + moveRight);
          }
        }
      }
    }
  }
  // STEP 7 - at this point, output of the (image, kernel) layer is in out[]
  if (adder_mode = 1) {
    printf("adder_result = [\n");
  } else {
    printf("compare_result = [\n");
  }
  for(count = 0; count < out_w * out_h; count++) {
    printf("%f,\n", (double) ((int) (out[count])) / 65536);
  }
  printf("]\n");
}
