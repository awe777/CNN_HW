#include <stdio.h>
#include <stdint.h>
#include <sleep.h>
uint32_t *control = (uint32_t *) 0x40000000;
int main() {
  *(control) = 0;
  // STEP 3 - commented variable initialisations are to be replaced with a more suitable input data transfer
  // importing adderMode toggle, image, and kernel data
  int adderMode = 1; // 1 to run HW on adder mode, 0 to run HW on max-pooling mode
  int im_h = 28; // image height (vertical pixel length)
  int im_w = 28; // image width (horizontal pixel length)
  int wg_dim = 5; // kernel dimension, make sure this value is positive and less than 8
  int im[784] = {473481216,254574592,-174555136,229441536,-317095936,502104064,226213888,268615680,-52068352,-492535808,124600320,292208640,54263808,285360128,212926464,116719616,312770560,167428096,-107036672,-242237440,123666432,329515008,363298816,151633920,96436224,-101220352,126320640,332972032,41009152,486457344,-51527680,138854400,171278336,-232488960,-196722688,335822848,3751936,-209600512,284147712,500416512,-49741824,-173670400,-321126400,266452992,-30998528,222740480,-484982784,-485015552,-154877952,-410632192,217759744,-472170496,-219414528,-121913344,202473472,66060288,-80363520,-225902592,176013312,-411959296,-482279424,-536330240,94584832,-354959360,-276299776,-238288896,-100188160,263356416,-377389056,266321920,409616384,-23379968,-502267904,-330760192,170115072,420364288,435535872,-491307008,-498532352,-289603584,-16760832,373587968,-90128384,86458368,-459800576,34996224,-335560704,207798272,-318799872,-177913856,-465600512,266027008,385597440,-351125504,19054592,-129400832,472334336,407666688,277692416,-58130432,-400310272,-29294592,52592640,125616128,123273216,-481509376,-408403968,248791040,203194368,-314966016,-502890496,199884800,-341393408,450150400,500400128,454688768,121307136,-54591488,-461045760,53084160,-279396352,433045504,-533004288,-201752576,35291136,-334331904,-280936448,-266616832,-29294592,-253444096,400998400,169705472,-176766976,-42303488,-473333760,18792448,-396689408,481869824,64864256,-137150464,335740928,-172425216,-241598464,-140361728,274366464,-317767680,141639680,10256384,411762688,457244672,127844352,428212224,-260603904,347570176,462864384,403849216,123027456,-86130688,327499776,396558336,-430309376,368656384,-126238720,198950912,146243584,414777344,44040192,-385843200,-474677248,239140864,517324800,-349667328,343556096,-201326592,464601088,277200896,-261849088,-49922048,460668928,220626944,300187648,500858880,159858688,-501678080,379256832,-56885248,415023104,371310592,-83132416,398737408,-288751616,-323796992,30310400,-493060096,247398400,185974784,-291782656,-90800128,39616512,389021696,-535085056,-19791872,480821248,383844352,-489504768,281100288,-453230592,-167247872,317194240,45563904,163266560,150601728,165953536,460996608,-516882432,-48267264,285179904,232407040,-410042368,-524533760,-418529280,-217612288,-330809344,70123520,-167739392,501858304,229801984,-491438080,-502939648,-26361856,-231866368,-144408576,-501907456,346800128,155582464,-437108736,-345849856,364888064,387350528,177618944,274186240,103153664,505085952,-471924736,108101632,219529216,-88932352,260947968,-524648448,-97959936,-51068928,-142606336,-465387520,443826176,119242752,410763264,149798912,-258211840,-525926400,-475955200,-131432448,-393936896,-355532800,-534626304,255885312,-124059648,-329089024,168919040,-7569408,-281591808,180240384,-295731200,18300928,114507776,-312147968,12173312,478199808,385679360,-79675392,451035136,-480444416,466305024,-528842752,-444661760,-217972736,-517062656,-67485696,-474923008,-397000704,109051904,488849408,99844096,-155795456,29491200,-450084864,205651968,447217664,-236257280,8421376,506036224,453984256,-157859840,189939712,120242176,-151601152,183517184,198426624,-299008000,-151502848,144359424,22659072,-513720320,389758976,-185679872,480903168,361807872,-431489024,33816576,268500992,323944448,-71073792,-136036352,325877760,-462372864,-192380928,-69107712,-222478336,-343326720,-283049984,50233344,-329777152,-297893888,-279543808,330088448,535363584,-262406144,-244203520,408403968,-488833024,323305472,-276447232,204226560,53362688,-237338624,100237312,-37617664,-207323136,-225640448,-251199488,-132857856,-333692928,321273856,476954624,-438419456,-396935168,-534134784,349634560,332906496,-328695808,-364511232,401047552,-105807872,186613760,-251199488,347095040,-438140928,284639232,189644800,-34553856,-238092288,229294080,82804736,171556864,-453099520,460275712,478953472,-179322880,-373424128,111722496,430374912,220364800,458555392,451510272,-181846016,31981568,-252706816,45678592,-402030592,-330661888,-198410240,29949952,-33374208,152420352,-13713408,-283131904,493060096,345571328,-246284288,224116736,432504832,-420036608,-179765248,232931328,-354762752,199901184,-2752512,33226752,434831360,183304192,-279576576,-236847104,434831360,205455360,175112192,-212598784,133447680,-448299008,-223641600,-28672000,449363968,-529498112,332546048,370458624,310247424,349044736,245170176,535183360,-55033856,-409141248,-268206080,135249920,-485982208,-179290112,81199104,-410976256,-234520576,235782144,-410419200,-482410496,416038912,-61259776,-113082368,-376045568,464437248,-463863808,-66961408,-253575168,-385187840,262914048,-456491008,146358272,75595776,4243456,10747904,-25657344,64323584,-139870208,-390791168,-416137216,-112902144,121143296,216662016,-305790976,91521024,-313065472,-161366016,277413888,475217920,-161415168,303448064,-32915456,81281024,-193937408,324747264,43581440,349421568,-363446272,286539776,-476479488,237649920,521158656,-430145536,188366848,55181312,441761792,234848256,-15630336,-280346624,287162368,36798464,474218496,-193527808,288669696,79675392,-232488960,358154240,-178503680,219168768,56950784,-213123072,314408960,395493376,-448561152,-112934912,-292929536,179257344,460636160,31834112,197935104,259571712,-80019456,-250527744,23248896,252755968,22953984,446382080,-126304256,-328024064,-40173568,29736960,347570176,493027328,190988288,-26542080,348585984,361791488,161398784,42991616,191512576,-373391360,488669184,463945728,403030016,22134784,-90898432,61423616,331448320,-209371136,-508887040,-450707456,-318160896,58687488,-121290752,454688768,-524713984,-61177856,197558272,220594176,277774336,-236355584,-9928704,264126464,55525376,148914176,134889472,413384704,278036480,-13828096,206520320,-126140416,459767808,364363776,322355200,354353152,213925888,-269631488,-129368064,-499728384,276135936,-31162368,-93782016,-196984832,507133952,-151486464,-50200576,132218880,-41631744,-217382912,-346849280,-290127872,231063552,-312901632,230195200,53067776,-459538432,-397213696,355483648,-229867520,428212224,-190005248,-67665920,474071040,-318636032,-85999616,63750144,79249408,-447168512,20267008,-368476160,447479808,331907072,-208912384,-97353728,175620096,296353792,493371392,287260672,-391938048,524042240,164397056,342556672,-533643264,121700352,-33325056,152453120,173309952,514834432,493944832,-328122368,-516210688,335085568,82984960,-21479424,-235241472,222150656,129384448,-199409664,360628224,443269120,349274112,348258304,-357957632,80510976,434700288,-533397504,224067584,-83787776,-213385216,455737344,464437248,-214810624,219496448,131956736,395214848,-77283328,-155860992,210173952,-281001984,486735872,482967552,-235634688,95371264,-23216128,149798912,345767936,131661824,-162545664,-166871040,-107577344,-221396992,174080000,-10076160,-56852480,-47120384,-92684288,-224346112,296484864,-160235520,45858816,-71319552,-532955136,288833536,-146374656,-339165184,222232576,290635776,214499328,23855104,-207290368,-96583680,526860288,274415616,331792384,-235782144,336838656,-305201152,-510033920,-185860096,-96305152,180633600,-267354112,-117063680,-294060032,-304414720,317243392,114327552,232407040,-437157888,358285312,-168755200,355041280,234127360,281706496,114606080,68780032,65830912,149798912,311508992,146571264,-137428992,282411008,-448806912,-210223104,184057856,-262520832,-403865600,-268566528,-266862592,97697792,-356990976,-238878720,-340885504,17235968,289636352,-302514176,-287260672,191479808,446136320,-289030144,-168148992,464388096,411697152,259407872,229179392,-84082688,306561024,-144621568,-27066368,435945472,-387301376,307904512,-119160832,-16531456,156254208,178323456,142016512,526909440,-457949184,255705088,-121421824,131137536,205750272,-155123712,-188170240,-536543232,358023168,-217858048,-81018880,-471531520,-455262208,-52084736,-9240576,-44236800,-391741440,382189568,-67256320,447070208,-508231680,350011392,138936320,-169771008,186597376,154910720,-122077184,-198230016,487915520,-71565312,-514916352,-414400512,409567232,-121126912,513540096,453738496,331579392}; // image array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int wg[25] = {-54788096,349110272,286605312,332546048,-165560320,-335708160,188579840,-426688512,163217408,242270208,-364298240,-255983616,177160192,-153468928,-100466688,-368787456,396410880,-524648448,-468058112,126156800,-74874880,-113836032,-369328128,-499826688,89161728}; // square kernel array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int out_h = im_h - wg_dim + 1;
  int out_w = im_w - wg_dim + 1;
  int out[out_w * out_h]; // output of this (image, kernel) layer will be stored here, format is signed fixed point with radix at 16th (Q15.16)
  // STEP 4
  int jumps = 8 - wg_dim + 1;
  int out_h_rep = out_h % jumps == 0 ? out_h / jumps : 1 + out_h / jumps; // Math.ceil(out_h / jumps)
  int out_w_rep = out_w % jumps == 0 ? out_w / jumps : 1 + out_w / jumps; // Math.ceil(out_w / jumps)
  // STEP 5
  int count = 0;
  for(count = 0; count < 7 * 7; count++) {
    if(count % 7 < wg_dim && count / 7 < wg_dim) {
      *(control + 65 + count) = wg[wg_dim * (count / 7) + count % 7];
    } else {
      *(control + 65 + count) = 0;
    }
  }
  // STEP 6
  int jumpRight = 0;
  int jumpDown = 0;
  int moveRight = 0;
  int moveDown = 0;
  for(jumpDown = 0; jumpDown < out_h_rep; jumpDown++) {
    for(jumpRight = 0; jumpRight < out_w_rep; jumpRight++) {
      for(moveDown = 0; moveDown < 8; moveDown++) {
        for(moveRight = 0; moveRight < 8; moveRight++) {
          if(jumps * jumpRight + moveRight < im_w && jumps * jumpDown + moveDown < im_h) {
            *(control + 1 + 8 * moveDown + moveRight) = im[im_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)];
          } else {
            *(control + 1 + 8 * moveDown + moveRight) = 0;
          }
        }
      }
      if(adderMode = 1) {
        *(control) = 0xffffffff;// turn on all the bits to enable adder mode
      } else {
        *(control) = 0x007fffff; // turn off the first 9 bits to enable max-pooling mode
      }
      usleep(1); // sleep length is mostly determined by HW specifications and performance (added 10% extra time as buffer)
      *(control) = 0;
      for(moveDown = 0; moveDown < jumps; moveDown++) {
        for(moveRight = 0; moveRight < jumps; moveRight++) {
          if(jumps * jumpRight + moveRight < out_w && jumps * jumpDown + moveDown < out_h) {
            out[out_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)] = (int)*(control + 114 + 8 * moveDown + moveRight);
          }
        }
      }
    }
  }
  // STEP 7 - at this point, output of the (image, kernel) layer is in out[]
  printf("result = [\n");
  for(count = 0; count < out_w * out_h; count++) {
    printf("%f,\n", (double) ((int) (out[count])) / 65536);
  }
  printf("]\n");
}
