#include <stdio.h>
#include <stdint.h>
#include <sleep.h>
uint32_t *control = (uint32_t *) 0x40000000;
int main() {
  *(control) = 0;
  // STEP 3 - commented variable initialisations are to be replaced with a more suitable input data transfer
  // importing adderMode toggle, image, and kernel data
  int adderMode = 1; // 1 to run HW on adder mode, 0 to run HW on max-pooling mode
  int im_h = 28; // image height (vertical pixel length)
  int im_w = 28; // image width (horizontal pixel length)
  int wg_dim = 5; // kernel dimension, make sure this value is positive and less than 8
  int im[784] = {228474880,132464640,89964544,127647744,218398720,-172097536,-389283840,-257392640,135970816,159907840,326762496,-80478208,-31244288,352550912,-342900736,27475968,-121946112,466288640,-243023872,270712832,365871104,-100712448,-483426304,-93143040,469925888,-415875072,-287588352,401080320,-71860224,197984256,-481574912,5898240,-82116608,103809024,6504448,-460701696,15581184,-88457216,238829568,411746304,56393728,-20004864,-100827136,-346587136,135331840,-514293760,-15433728,-47874048,81362944,-319668224,139018240,178421760,-157106176,364838912,204079104,-427360256,-460914688,19546112,248987648,-534691840,-240844800,366673920,-403783680,198148096,458817536,94502912,438304768,156418048,261488640,159268864,-223805440,-354844672,-40665088,-282198016,460554240,-184156160,192102400,41615360,-18448384,-333627392,-105447424,513818624,-36126720,-48218112,71548928,-466780160,362217472,263503872,235585536,-103546880,249741312,-517193728,490045440,403144704,27836416,309755904,-43188224,375783424,-513556480,106561536,-135692288,472924160,-119406592,-188547072,150749184,371064832,177061888,-445153280,-193576960,519094272,25247744,-427556864,114278400,108724224,-206979072,-303218688,270991360,-265863168,-27525120,424919040,-177651712,-78888960,416776192,-533364736,-192413696,-429850624,339345408,-422330368,-288309248,-431292416,-197591040,231784448,165576704,-422608896,472465408,368984064,390823936,38207488,53460992,-95256576,24051712,355876864,-481492992,-372359168,-431587328,-432635904,-265043968,-210354176,405307392,-176308224,-201261056,-434274304,173539328,-338984960,144343040,451444736,-112476160,292225024,-427950080,174063616,298139648,-68796416,-433848320,79675392,-319700992,444383232,251904000,-102449152,148504576,379633664,-222478336,525500416,62750720,58638336,97435648,361267200,40730624,-146194432,-6799360,517931008,-336445440,70942720,-445153280,270106624,-324288512,-23363584,-151814144,434798592,347963392,324141056,391626752,-497025024,160727040,-498909184,-487981056,465387520,-29097984,304906240,-306102272,-371048448,62930944,330727424,-242515968,418807808,534953984,-313704448,-351010816,-380387328,279773184,-207093760,-420200448,-145588224,-73957376,192036864,329793536,-328597504,195756032,112181248,301203456,-160645120,501514240,-491536384,2293760,-113000448,245170176,274989056,357400576,-400097280,-19873792,-110493696,157007872,-117784576,357564416,16678912,352878592,491307008,-90030080,-97042432,46972928,-162611200,-352944128,-468221952,94666752,228311040,372211712,-252084224,356433920,-150110208,-311312384,-83804160,502759424,-100335616,257654784,5537792,522829824,425197568,463699968,137297920,92602368,162742272,-22364160,-258981888,278904832,-107921408,-532054016,324485120,84967424,55197696,-344342528,343212032,524320768,86622208,-108118016,52658176,-431521792,-191037440,-313901056,-488914944,333774848,-269484032,-4014080,-317915136,-446136320,239271936,324829184,-77922304,-162856960,159563776,68370432,-81838080,375390208,329203712,-228900864,229670912,273170432,-485834752,265322496,-338673664,183123968,378601472,-412401664,283836416,-407224320,499548160,135823360,56639488,442892288,198197248,-496975872,-470482944,-26968064,7159808,125288448,205504512,-224755712,348110848,25591808,-78774272,305774592,354926592,-20185088,215711744,-21495808,179781632,-36257792,377847808,29769728,-206798848,-390037504,274956288,224526336,-461914112,-458522624,21741568,-300105728,-156827648,314081280,430063616,-513146880,304742400,-230375424,-19480576,21692416,-160940032,20561920,467288064,-272072704,73302016,433258496,-230359040,229490688,67878912,195313664,-192643072,-177127424,-428146688,294518784,-200212480,-478085120,146997248,-212729856,113410048,-128827392,452493312,358481920,-63193088,100204544,-23003136,-484999168,281362432,476479488,-324747264,-520519680,-351141888,472858624,401784832,-344522752,-269975552,78528512,-307822592,259702784,52101120,515866624,409010176,-22413312,-424329216,411303936,-142262272,-52396032,532856832,-81674240,-44613632,509214720,36208640,105414656,275841024,-517259264,-127713280,-356286464,-198475776,232767488,163184640,-354402304,24084480,531660800,-406978560,148226048,-209797120,-478216192,-194854912,-296157184,160645120,-174096384,516784128,161071104,-496222208,253427712,-116686848,127942656,-260407296,199098368,-455852032,11337728,-97337344,9994240,-481542144,319553536,64765952,421478400,-472678400,305430528,523747328,347750400,-39698432,-232046592,-292356096,-420724736,-493600768,418938880,87687168,427130880,-18972672,383746048,63520768,398065664,-83230720,518979584,50200576,90669056,138149888,224575488,411025408,-389545984,316702720,-145604608,-375128064,-474365952,234979328,-148586496,-370524160,-261947392,-467763200,250904576,74350592,125239296,-336723968,125255680,479428608,305938432,-361840640,449314816,-103038976,96174080,343834624,-118833152,531759104,-390430720,467681280,-122552320,-185073664,-501448704,66027520,237518848,380010496,280379392,117506048,-454705152,438960128,-118947840,-234160128,325304320,-234536960,-201211904,293076992,-347324416,-288178176,-161759232,344588288,169361408,-238272512,394838016,342966272,450527232,-92880896,525500416,-140754944,535068672,-96829440,225656832,137134080,-467714048,-81657856,-122175488,377077760,-254525440,173965312,226803712,-257146880,-151207936,2359296,-29507584,-518258688,397131776,-52740096,-148242432,82526208,-126763008,-133709824,400392192,-79380480,388775936,-418430976,185483264,275972096,507281408,421298176,405307392,-115769344,398557184,-69910528,145375232,-508968960,-123764736,-245596160,-217546752,517144576,-428425216,-503349248,470073344,87998464,-180862976,6782976,448724992,-157515776,-156286976,439418880,-258768896,269090816,-475496448,187580416,-53903360,-299319296,41992192,176259072,-410599424,-50233344,448446464,-146489344,301891584,46284800,-261013504,442007552,-213041152,331137024,-359579648,-392101888,323944448,-488226816,419954688,427343872,-116654080,-442433536,-71598080,318636032,330514432,-179798016,-85426176,242270208,69042176,55099392,-105693184,-19808256,200785920,75890688,-478150656,-193413120,493125632,-482852864,-487112704,-249413632,111198208,66060288,-276496384,-83263488,230948864,-456736768,200376320,166199296,-55853056,-491962368,-54509568,169852928,487833600,-528285696,-106135552,-131170304,355336192,55640064,-65175552,-168017920,-281968640,392331264,-437354496,-468860928,430637056,317308928,-290062336,-483262464,240582656,-229867520,-113524736,-391856128,-330235904,-404504576,-484638720,-130842624,-349061120,-448413696,-239681536,-124436480,16629760,54607872,-40091648,-122109952,149110784,70467584,136216576,279396352,-458948608,528990208,161120256,-223870976,225050624,-67125248,-489078784,-66387968,521568256,-509444096,-102645760,-327467008,-33095680,8863744,-400457728,-118964224,471531520,-499023872,166510592,-321732608,-411631616,6995968,-364855296,-190087168,165511168,466649088,-406421504,31899648,413302784,-249626624,-300924928,156205056,135806976,448430080,-427573248,365412352,-487030784,54345728,226181120,-364314624,-470433792,387825664,-515686400,10043392,-93241344,140247040,337608704,89341952,437600256,139132928,-531103744,154173440,283213824,-108380160,-381173760,-195395584,-346685440,-341114880,259915776,326320128,55083008,20086784,106577920,56737792,136757248,-82280448,-384942080,238206976,-434536448,202801152,-234684416,241516544,476217344,239763456,87785472,-22986752,175702016,-389464064,296140800,-417726464,-183861248,-64225280,-179699712,411844608,-65650688,-364363776,343752704,-65978368,-20791296,-205242368,-445644800,-39370752,328318976,151044096,201359360,386383872,491192320,283639808,-68468736,497729536,535232512,-431833088,-331972608,434913280,11665408,-319537152,-9011200,531251200,175292416,85639168,417808384,-442122240,3162112,232095744,-366395392,-43728896,90521600,-272318464,-215220224,-380010496,-507822080,-263045120,342736896,-383614976,96288768,-109182976,202047488,142901248,-462389248,300466176,-327352320,-301711360,488161280,-191528960,416972800,-232914944}; // image array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int wg[25] = {448888832,407879680,-290373632,412205056,-167116800,435470336,442744832,-278134784,132087808,-204357632,214777856,42909696,-106856448,219463680,-182665216,-148963328,-329318400,413925376,107937792,143982592,29310976,-13860864,513359872,-461209600,158171136}; // square kernel array goes here, format is signed fixed point with radix at 8th (Q7.24), 14 LSBs will be ignored by HW
  int out_h = im_h - wg_dim + 1;
  int out_w = im_w - wg_dim + 1;
  int out[out_w * out_h]; // output of this (image, kernel) layer will be stored here, format is signed fixed point with radix at 16th (Q15.16)
  // STEP 4
  int jumps = 8 - wg_dim + 1;
  int out_h_rep = out_h % jumps == 0 ? out_h / jumps : 1 + out_h / jumps; // Math.ceil(out_h / jumps)
  int out_w_rep = out_w % jumps == 0 ? out_w / jumps : 1 + out_w / jumps; // Math.ceil(out_w / jumps)
  // STEP 5
  int count = 0;
  for(count = 0; count < 7 * 7; count++) {
    if(count % 7 < wg_dim && count / 7 < wg_dim) {
      *(control + 65 + count) = wg[wg_dim * (count / 7) + count % 7];
    } else {
      *(control + 65 + count) = 0;
    }
  }
  // STEP 6
  int jumpRight = 0;
  int jumpDown = 0;
  int moveRight = 0;
  int moveDown = 0;
  for(jumpDown = 0; jumpDown < out_h_rep; jumpDown++) {
    for(jumpRight = 0; jumpRight < out_w_rep; jumpRight++) {
      for(moveDown = 0; moveDown < 8; moveDown++) {
        for(moveRight = 0; moveRight < 8; moveRight++) {
          if(jumps * jumpRight + moveRight < im_w && jumps * jumpDown + moveDown < im_h) {
            *(control + 1 + 8 * moveDown + moveRight) = im[im_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)];
          } else {
            *(control + 1 + 8 * moveDown + moveRight) = 0;
          }
        }
      }
      if(adderMode = 1) {
        *(control) = 0xffffffff;// turn on all the bits to enable adder mode
      } else {
        *(control) = 0x007fffff; // turn off the first 9 bits to enable max-pooling mode
      }
      usleep(1); // sleep length is mostly determined by HW specifications and performance (added 10% extra time as buffer)
      *(control) = 0;
      for(moveDown = 0; moveDown < jumps; moveDown++) {
        for(moveRight = 0; moveRight < jumps; moveRight++) {
          if(jumps * jumpRight + moveRight < out_w && jumps * jumpDown + moveDown < out_h) {
            out[out_w * (jumps * jumpDown + moveDown) + (jumps * jumpRight + moveRight)] = (int)*(control + 114 + 8 * moveDown + moveRight);
          }
        }
      }
    }
  }
  // STEP 7 - at this point, output of the (image, kernel) layer is in out[]
  printf("result = [\n");
  for(count = 0; count < out_w * out_h; count++) {
    printf("%f,\n", (double) ((int) (out[count])) / 65536);
  }
  printf("]\n");
}
